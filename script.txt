etting Up the Task Scheduler to Run the Script

    Open Task Scheduler:
        Press Win + R, type taskschd.msc, and press Enter to open Task Scheduler.

    Create a New Task:
        Click Create Task in the Actions pane on the right.

    General Settings:
        In the General tab, provide a name for the task, e.g., "Automated Backup Task".
        Select Run whether user is logged on or not and check Run with highest privileges.

    Triggers:
        Go to the Triggers tab and click New.
        Choose Daily.
        Set the Repeat task every option to the desired interval, such as 1 hour.
        Ensure the for a duration of option is set to Indefinitely.
        Click OK.

    Actions:
        Go to the Actions tab and click New.
        In the Action dropdown, select Start a program.
        In the Program/script field, browse to and select your continuity.bat script.
        In the Add arguments (optional) field, type -backup to specify the backup operation.
        Click OK.

    Conditions:
        Go to the Conditions tab.
        Uncheck Start the task only if the computer is on AC power to ensure it runs even on battery.

    Settings:
        Go to the Settings tab.
        Check Allow task to be run on demand.
        Check If the task fails, restart every and set it to 5 minutes, and Attempt to restart up to 3 times.

    Finish:
        Click OK to create the task.
        Enter your credentials if prompted.

Monitoring and Verifying the Backup Task

    Check Task Scheduler:
        After the task runs, check the Last Run Result column in Task Scheduler.
        A result of 0x0 indicates success.

    View Logs:
        Use the logging mechanism in your script to write to a log file:

batch

@echo off

REM Set the script directory as the current directory
cd /d "%~dp0"

REM Set the network share path for backups
set server_backup_path="\\WIN-K98IGNCENCT\Backups"

REM Set log file path
set log_file=%USERPROFILE%\Desktop\backup_log.txt

REM Function to log messages
:log
echo %date% %time%: %~1 >> "%log_file%"
goto :eof

REM Check if any argument is provided
call :log "Checking command-line arguments..."
if "%~1"=="" (
    call :log "No arguments provided."
    call :display_help
    exit /b 0
)

REM Process command-line arguments
call :log "Processing command-line arguments..."
if /i "%~1"=="-backup" (
    call :log "Creating backup folder and copying user-modified files..."
    call :create_backup_folder
    exit /b 0
) else if /i "%~1"=="-save" (
    call :log "Saving backup to server..."
    call :save_backup_to_server
    exit /b 0
) else if /i "%~1"=="-restore" (
    if "%~2"=="" (
        call :log "Restoring from the most recent backup..."
        call :restore_from_server "most_recent"
    ) else (
        call :log "Restoring from specified backup version: %~2"
        call :restore_from_server "%~2"
    )
    exit /b 0
) else if /i "%~1"=="-install" (
    call :log "Installing necessary tools..."
    call :install_dependencies
    exit /b 0
) else if /i "%~1"=="-h" (
    call :log "Displaying help..."
    call :display_help
    exit /b 0
) else (
    call :log "Invalid option. Use -h for help."
    exit /b 1
)

REM Function to create a backup folder and gather user-modified file paths
:create_backup_folder
call :log "Generating list of user-modified files..."

REM Set the output location for the backup folder
set timestamp=%date:~10,4%-%date:~4,2%-%date:~7,2%_%time:~0,2%%time:~3,2%%time:~6,2%
set backup_folder=%USERPROFILE%\Desktop\Backup_%timestamp%

REM Create the backup folder
call :log "Creating backup folder %backup_folder%..."
mkdir "%backup_folder%"
if %errorlevel% neq 0 (
    call :log "Failed to create backup folder."
    exit /b 1
)

REM Loop through all user directories
for /d %%U in (C:\Users\*) do (
    REM Exclude system directories
    if /i not "%%~nxU"=="Public" (
        for /r "%%U" %%F in (*) do (
            REM Get the file's last modified timestamp and creation timestamp
            for /f "tokens=1-3 delims= " %%A in ('powershell -command "(Get-Item \\"%%F\\").LastWriteTime.ToString(\\"yyyyMMdd\\")"') do (
                set "file_date=%%A%%B%%C"
            )
            for /f "tokens=1-3 delims= " %%A in ('powershell -command "(Get-Item \\"%%F\\").CreationTime.ToString(\\"yyyyMMdd\\")"') do (
                set "creation_date=%%A%%B%%C"
            )

            REM Check if the file has been modified by a user
            if "%file_date%" gtr "%creation_date%" (
                call :log "User-modified file: %%F"
                echo %%F>>"%backup_folder%\files.txt"
            )
        )
    )
)

REM Check if any errors occurred during the file scan
if %errorlevel% neq 0 (
    call :log "Failed to generate list of user-modified files."
    exit /b 1
)

call :log "Copying user-modified disk contents to backup folder..."

REM Check if the files list is empty
if not exist "%backup_folder%\files.txt" (
    call :log "No user-modified files found to copy."
    exit /b 1
)

REM Copy the user-modified files to the backup folder
for /f "usebackq delims=" %%f in ("%backup_folder%\files.txt") do (
    xcopy "%%f" "%backup_folder%" /s /e /h /c /i /q /y
)

if %errorlevel% neq 0 (
    call :log "Failed to copy user-modified disk contents to backup folder."
    exit /b 1
)

call :log "User-modified disk contents copied successfully to %backup_folder%."

REM Save the backup to the server
call :save_backup_to_server
exit /b 0

REM Function to save backup to server and delete the local backup folder
:save_backup_to_server
call :log "Saving backup to server..."
xcopy "%backup_folder%" "%server_backup_path%" /s /e /h /c /i /q /y

if %errorlevel% neq 0 (
    call :log "Failed to save backup to server."
    exit /b 1
)

REM Delete the local backup folder after saving to server
rd /s /q "%backup_folder%"
if %errorlevel% neq 0 (
    call :log "Failed to delete the local backup folder."
    exit /b 1
)

call :log "Backup saved to server and local backup folder deleted."
exit /b 0

REM Display help function
:display_help
echo Usage: %~nx0 "[-backup|-save|-restore [version]|-install|-h]"
echo Options:
echo   -backup: Create a backup folder and gather all file paths
echo   -save: Save the backup to a server
echo   -restore [version]: Restore from the specified or most recent backup
echo   -install: Install necessary tools
echo   -h: Display this help message
exit /b 0